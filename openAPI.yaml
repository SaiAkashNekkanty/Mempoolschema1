TransactionFee:
  import: 
    - React
    - useState
    - useEffect
  path: './TransactionFee.css'
  component: |
    export default function TransactionFee() {
      const [feeData, setFeeData] = useState(null);

      useEffect(() => {
        fetch('https://mempool.space/api/v1/fees/recommended')
          .then(response => response.json())
          .then(data => setFeeData(data))
          .catch(error => console.error('Error fetching data:', error));
      }, []);

      return (
        <div className="transaction-fee">
          <h2>Transaction Fees</h2>
          {feeData && (
            <div className="fee-details">
              <p><strong>No Priority:</strong> {feeData.minimumFee} sat/vB, ${feeData.minimumFee * 0.00000001 * 80}</p>
              <p><strong>Low Priority:</strong> {feeData.economyFee} sat/vB, ${feeData.economyFee * 0.00000001 * 80}</p>
              <p><strong>Medium Priority:</strong> {feeData.hourFee} sat/vB, ${feeData.hourFee * 0.00000001 * 80}</p>
              <p><strong>High Priority:</strong> {feeData.halfHourFee} sat/vB, ${feeData.halfHourFee * 0.00000001 * 80}</p>
            </div>
          )}
        </div>
      );
    }

DifficultyAdjustment:
  import: 
    - React
    - useState
    - useEffect
  path: './DifficultyAdjustment.css'
  component: |
    export default function DifficultyAdjustment() {
      const [difficultyData, setDifficultyData] = useState(null);

      useEffect(() => {
        fetch('https://mempool.space/api/v1/difficulty-adjustment')
          .then(response => response.json())
          .then(data => setDifficultyData(data))
          .catch(error => console.error('Error fetching data:', error));
      }, []);

      // Function to convert seconds to human-readable time format
      const secondsToTime = (seconds) => {
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);
        const remainingHours = hours % 24;
        const remainingMinutes = minutes % 60;
        return `${days} days, ${remainingHours} hours, ${remainingMinutes} minutes`;
      };

      return (
        <div className="difficulty-adjustment">
          <h2>Difficulty Adjustment</h2>
          {difficultyData && (
            <div className="difficulty-details">
              <p>Estimated next difficulty adjustment in: {secondsToTime(difficultyData.remainingTime)}</p>
              <p>Average block time: {difficultyData.timeAvg} seconds</p>
              <p>Change in difficulty: {difficultyData.difficultyChange}%</p>
              <p>Previous difficulty change: {difficultyData.previousRetarget}%</p>
              <p>Next difficulty retarget height: {difficultyData.nextRetargetHeight}</p>
              <p>Expected difficulty adjustment date: {new Date(difficultyData.estimatedRetargetDate).toLocaleString()}</p>
            </div>
          )}
        </div>
      );
    }
